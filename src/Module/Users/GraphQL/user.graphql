input CreateAccountInput {
    name: String!
    email: String @rules(apply: ["required", "email", "unique:cart_users,email"])
    password: String!
    token: String
}

type CreateAccountPayload {
    token: String
    user: User
}

input SetSessionInput {
    products: [ CartProductInput ! ]
}

input CartProductInput {
    id: ID!
    quantity: Int!
}

type SetSessionPayload {
    cart_uuid : String
    products: [ CartProduct ]
}

type CartProduct {
    id: ID!
    quantity: Int!
}

extend type Mutation {
    logIn(input: LoginInput! @spread) : LogInPayload @field(resolver: "Lab19\\Cart\\Module\\Users\\GraphQL\\Mutations\\Account@logIn")
    logOut : LogOutPayload @field(resolver: "Lab19\\Cart\\Module\\Users\\GraphQL\\Mutations\\Account@logOut")
    addToCart(input: AddToCartInput!) : CartPayload
        @field(resolver: "Lab19\\Cart\\Module\\Users\\GraphQL\\Mutations\\Cart@addToCart")
        @gate(ability: "add-to-cart", sessionOnly: true )
    removeFromCart(input: RemoveFromCartInput!) : CartPayload
        @field(resolver: "Lab19\\Cart\\Module\\Users\\GraphQL\\Mutations\\Cart@removeFromCart")
        @gate(ability: "remove-from-cart", sessionOnly: true )
    updateCartQuantity(input: UpdateCartQuantityInput!) : CartPayload
        @field(resolver: "Lab19\\Cart\\Module\\Users\\GraphQL\\Mutations\\Cart@updateCartQuantity")
        @gate(ability: "add-to-cart", sessionOnly: true )
}

input LoginInput {
    email: String!
    password: String!
}

type LogInPayload {
    user: User
    token: String
}

type LogOutPayload {
    success: Boolean!
}

input AddToCartInput {
    items: [ AddToCartItemInput! ]
}

input AddToCartItemInput {
    product_id: ID!
    quantity: Int!
}

type CartPayload {
    cart: Cart
}

input RemoveFromCartInput {
    product_id: ID!
    quantity: Int!
}

input UpdateCartQuantityInput {
    product_id: ID!
    quantity: Int!
}

type Cart {
    items: [CartItem!]
}

type CartItem {
    product_id: ID!
    quantity: Int!
}
