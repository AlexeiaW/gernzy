"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {

    users: [User!]!
        @paginate(type: "paginator" model: "Lab19\\Cart\\Module\\Users\\User")
        @can(
            ability: "view",
            model: "Lab19\\Cart\\Module\\Users\\User",
            policy: "Lab19\\Cart\\Module\\Users\\Policies\\UserPolicy"
        )

    user(id: ID @eq): User @find(model: "Lab19\\Cart\\Module\\Users\\User")
        @can(
            ability: "view",
            model: "Lab19\\Cart\\Module\\Users\\User",
            policy: "Lab19\\Cart\\Module\\Users\\Policies\\UserPolicy"
        )

    orders: [Order!]! @paginate(type: "paginator" model: "Lab19\\Cart\\Module\\Orders\\Order")
    order(id: ID @eq): Order @find(model: "Lab19\\Cart\\Module\\Orders\\Order")

    order_items: [OrderItem!]! @paginate(type: "paginator" model: "Lab19\\Cart\\Module\\Orders\\OrderItem")
    order_item(id: ID @eq): OrderItem @find(model: "Lab19\\Cart\\Module\\Orders\\OrderItem")

}

type User {
    id: ID!
    name: String!
    email: String!
    cart: Cart,
    session: Session,
    created_at: DateTime!
    updated_at: DateTime!
}

type Session {
    token: String!
}

type Order {
    id: ID!
    currency_id: Int!
    cart_id: ID!
    cart: Cart @hasOne
}

type Cart {
    id: ID!
    order_id: ID
    item_count: Int!
    order: Cart @belongsTo
    items: [CartItem!]
}

type CartItem {
    product_id: ID!
    quantity: Int!
}


type OrderItem {
    id: ID!
    order_id: ID!
}

type Mutation {
    createOrder(input: CreateOrderInput! @spread) : Order @create(model: "Lab19\\Cart\\Module\\Orders\\Order")
        @can(
            ability: "create",
            model: "Lab19\\Cart\\Module\\Orders\\Order",
            policy: "Lab19\\Cart\\Module\\Users\\UserPolicy"
        )

    createSession : Session @field(resolver: "Lab19\\Cart\\Module\\Users\\GraphQL\\Mutations\\CreateSession@create")

    setSession(input: SetSessionInput!) : SetSessionPayload @field(resolver: "Lab19\\Cart\\Module\\Users\\GraphQL\\Mutations\\SetSession@set")

    createAccount(input: CreateAccountInput! @spread): CreateAccountPayload @field(resolver: "Lab19\\Cart\\Module\\Users\\GraphQL\\Mutations\\CreateAccount@create")
}

type Session {
    id: ID!
    token: String!
    cart_id: ID
}

input CreateOrderInput {
    cart: CreateCartRelation
}

input CreateCartRelation {
    connect: ID,
    create: CreateCartInput
    update: UpdateCartInput
}

input CreateCartInput {
    item_count: Int
}

input UpdateCartInput {
    id: ID,
    item_count: Int
}

#import ../Module/Users/GraphQL/user.graphql
#import ../Module/Products/GraphQL/products.graphql
