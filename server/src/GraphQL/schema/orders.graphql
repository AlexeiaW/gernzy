extend type Mutation {
    checkout(input: CheckoutInput!): CheckoutPayload
        @field(resolver: "Gernzy\\Server\\GraphQL\\Mutations\\Checkout@checkout")
        @gate(ability: "can-checkout", sessionOnly: true)
}

extend type Query {
    order(id: ID @eq): Order
        @find(model: "Gernzy\\Server\\Models\\Order")
        @can(
            ability: "view"
            find: "id"
            model: "Gernzy\\Server\\Models\\Order"
            policy: "Gernzy\\Server\\Policies\\OrderPolicy"
        )

    orders: [Order!]! @paginate(type: "paginator", model: "Gernzy\\Server\\Models\\Order")

    adminOrders: [Order!]!
        @paginate(type: "paginator", model: "Gernzy\\Server\\Models\\Order")
        @can(ability: "view", model: "Gernzy\\Server\\Models\\User", policy: "Gernzy\\Server\\Policies\\UserPolicy")

    order_items: [OrderItem!]! @paginate(type: "paginator", model: "Gernzy\\Server\\Models\\OrderItem")
    order_item(id: ID @eq): OrderItem @find(model: "Gernzy\\Server\\Models\\OrderItem")
}

input CheckoutInput {
    name: String! @rules(apply: ["required"])
    email: String! @rules(apply: ["required", "email"])
    mobile: String!
    telephone: String!
    billing_address: BillingAddress! @rules(apply: ["required"])
    shipping_address: ShippingAddress! @rules(apply: ["required"])
    use_shipping_for_billing: Boolean!
    payment_method: String!
    agree_to_terms: Boolean!
    notes: String!
}

input BillingAddress {
    line_1: String! @rules(apply: ["required"])
    line_2: String
    state: String! @rules(apply: ["required"])
    postcode: String
    country: String!
}

input ShippingAddress {
    line_1: String! @rules(apply: ["required"])
    line_2: String
    state: String! @rules(apply: ["required"])
    postcode: String
    country: String! @rules(apply: ["required"])
}

type CheckoutPayload {
    success: Boolean!
    order: Order
    event_data: String
}

extend type Mutation {
    createOrder(input: CheckoutInput!): Order
        @field(resolver: "Gernzy\\Server\\GraphQL\\Mutations\\Order@create")
        @can(ability: "create", model: "Gernzy\\Server\\Models\\Order", policy: "Gernzy\\Server\\Policies\\OrderPolicy")
    updateOrder(id: ID!, input: UpdateOrderInput!): Order
        @field(resolver: "Gernzy\\Server\\GraphQL\\Mutations\\Order@update")
        @can(ability: "update", model: "Gernzy\\Server\\Models\\Order", policy: "Gernzy\\Server\\Policies\\OrderPolicy")
    setOrderItems(id: ID!, input: [SetOrderItemsInput!]): Order
        @field(resolver: "Gernzy\\Server\\GraphQL\\Mutations\\Order@setItems")
        @can(ability: "update", model: "Gernzy\\Server\\Models\\Order", policy: "Gernzy\\Server\\Policies\\OrderPolicy")
    deleteOrder(id: ID!): DeleteResult
        @field(resolver: "Gernzy\\Server\\GraphQL\\Mutations\\Order@delete")
        @can(ability: "delete", model: "Gernzy\\Server\\Models\\Order", policy: "Gernzy\\Server\\Policies\\OrderPolicy")
}

input UpdateOrderInput {
    name: String
    email: String @rules(apply: ["email"])
    mobile: String
    telephone: String
    billing_address: BillingAddress
    shipping_address: ShippingAddress
    use_shipping_for_billing: Boolean
    payment_method: String
    notes: String
}

input SetOrderItemsInput {
    product_id: ID!
    quantity: Int!
}

type Order {
    id: ID!
    email: String!
    name: String!
    currency_id: Int!
    cart_id: ID!
    is_admin_order: Boolean!
    cart: Cart @hasOne
    telephone: String
    shipping_address_line_1: String
    shipping_address_line_2: String
    shipping_address_postcode: String
    shipping_address_state: String
    shipping_address_country: String
    billing_address_line_1: String
    billing_address_line_2: String
    billing_address_postcode: String
    billing_address_state: String
    billing_address_country: String
    payment_method: String
    agree_to_terms: String
    notes: String
    created_at: String
}

type OrderItem {
    id: ID!
    order_id: ID!
}
